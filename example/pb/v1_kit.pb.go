// Code generated by protoc-gen-go-kit. DO NOT EDIT.
// versions:
// - protoc-gen-go-kit v0.0.1-devel
// - protoc            v3.6.1
package pb

import (
	context "context"
	errors "errors"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	http1 "github.com/go-kit/kit/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the go-kit package it is being compiled against.
// Requires go-kit v0.12.0.

// V1KitClient is the go-kit client API for V1 service.
type V1KitClient interface {
	// 获取部门详情
	GetDepartment(ctx context.Context, in *GetDepartmentRequest) (out *GetDepartmentResponse, err error)
}

type v1KitClient struct {
	s V1KitEndpointSet
}

func NewV1KitClient(s V1KitEndpointSet) V1KitClient {
	return &v1KitClient{s}
}

func (c *v1KitClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest) (out *GetDepartmentResponse, err error) {
	var response interface{}
	response, err = c.s.GetDepartmentEndpoint(ctx, in)
	if err != nil {
		return
	}
	out = response.(*GetDepartmentResponse)
	return
}

// V1KitServer is the server API for V1 service.
// All implementations must embed UnimplementedV1KitServer
// for forward compatibility
type V1KitServer interface {
	// 获取部门详情
	GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error)
	mustEmbedUnimplementedV1KitServer()
}

// UnimplementedV1KitServer must be embedded to have forward compatible implementations.
type UnimplementedV1KitServer struct {
}

func (UnimplementedV1KitServer) GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error) {
	return nil, errors.New("method GetDepartment not implemented")
}
func (UnimplementedV1KitServer) mustEmbedUnimplementedV1KitServer() {}

// UnsafeV1KitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1KitServer will
// result in compilation errors.
type UnsafeV1KitServer interface {
	mustEmbedUnimplementedV1KitServer()
}

// V1KitEndpointSet is realize kit/endpoint.Endpoint
type V1KitEndpointSet struct {
	// 获取部门详情
	GetDepartmentEndpoint endpoint.Endpoint
}

func NewV1KitEndpointSet(srv V1KitServer, mws ...endpoint.Middleware) V1KitEndpointSet {
	set := V1KitEndpointSet{}
	set.GetDepartmentEndpoint = func(ctx context.Context, request interface{}) (response interface{}, err error) {
		return srv.GetDepartment(ctx, request.(*GetDepartmentRequest))
	}
	for _, mw := range mws {
		set.GetDepartmentEndpoint = mw(set.GetDepartmentEndpoint)
	}
	return set
}

// V1KitHTTPTransport defined from kit/transport/http.
type V1KitHTTPTransport interface {
	DecodeGetDepartmentRequest(context.Context, *http.Request) (interface{}, error)
	EncodeGetDepartmentResponse(context.Context, http.ResponseWriter, interface{}) error
	EncodeGetDepartmentRequest(context.Context, *http.Request, interface{}) error
	DecodeGetDepartmentResponse(context.Context, *http.Response) (interface{}, error)
}

// V1KitGRPCTransport defined from kit/transport/grpc.
type V1KitGRPCTransport interface {
	DecodeGetDepartmentRequest(context.Context, interface{}) (interface{}, error)
	EncodeGetDepartmentResponse(context.Context, interface{}) (interface{}, error)
	EncodeGetDepartmentRequest(context.Context, interface{}) (interface{}, error)
	DecodeGetDepartmentResponse(context.Context, interface{}) (interface{}, error)
}

// V1KitHTTPHandlerSet is realize kit/transport/http.Server set.
type V1KitHTTPHandlerSet struct {
	GetDepartmentHandler *http1.Server
}

func NewV1KitHTTPHandlerSet(
	set V1KitEndpointSet,
	transport V1KitHTTPTransport,
	opts ...http1.ServerOption,
) V1KitHTTPHandlerSet {
	s := V1KitHTTPHandlerSet{}
	s.GetDepartmentHandler = http1.NewServer(
		set.GetDepartmentEndpoint,
		transport.DecodeGetDepartmentRequest,
		transport.EncodeGetDepartmentResponse,
		opts...,
	)
	return s
}

// V1KitGRPCHandlerSet is realize kit/transport/grpc.Server set.
type V1KitGRPCHandlerSet struct {
	GetDepartmentHandler *grpc.Server
}

func NewV1KitGRPCHandlerSet(
	set V1KitEndpointSet,
	transport V1KitGRPCTransport,
	opts ...grpc.ServerOption,
) V1KitGRPCHandlerSet {
	s := V1KitGRPCHandlerSet{}
	s.GetDepartmentHandler = grpc.NewServer(
		set.GetDepartmentEndpoint,
		transport.DecodeGetDepartmentRequest,
		transport.EncodeGetDepartmentResponse,
		opts...,
	)
	return s
}
