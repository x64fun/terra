// Code generated by protoc-gen-go-kit. DO NOT EDIT.
// versions:
// - protoc-gen-go-kit v0.0.1-devel
// - protoc            v3.6.1
package pb

import (
	context "context"
	errors "errors"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	http1 "github.com/go-kit/kit/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the go-kit package it is being compiled against.
// Requires go-kit v0.12.0.

// V0KitClient is the go-kit client API for V0 service.
type V0KitClient interface {
	// 健康检查
	Health(ctx context.Context, in *HealthRequest) (out *HealthResponse, err error)
}

type v0KitClient struct {
	s V0KitEndpointSet
}

func NewV0KitClient(s V0KitEndpointSet) V0KitClient {
	return &v0KitClient{s}
}

func (c *v0KitClient) Health(ctx context.Context, in *HealthRequest) (out *HealthResponse, err error) {
	var response interface{}
	response, err = c.s.HealthEndpoint(ctx, in)
	if err != nil {
		return
	}
	out = response.(*HealthResponse)
	return
}

// V0KitServer is the server API for V0 service.
// All implementations must embed UnimplementedV0KitServer
// for forward compatibility
type V0KitServer interface {
	// 健康检查
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedV0KitServer()
}

// UnimplementedV0KitServer must be embedded to have forward compatible implementations.
type UnimplementedV0KitServer struct {
}

func (UnimplementedV0KitServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, errors.New("method Health not implemented")
}
func (UnimplementedV0KitServer) mustEmbedUnimplementedV0KitServer() {}

// UnsafeV0KitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V0KitServer will
// result in compilation errors.
type UnsafeV0KitServer interface {
	mustEmbedUnimplementedV0KitServer()
}

// V0KitEndpointSet is realize kit/endpoint.Endpoint
type V0KitEndpointSet struct {
	// 健康检查
	HealthEndpoint endpoint.Endpoint
}

func NewV0KitEndpointSet(srv V0KitServer, mws ...endpoint.Middleware) V0KitEndpointSet {
	set := V0KitEndpointSet{}
	set.HealthEndpoint = func(ctx context.Context, request interface{}) (response interface{}, err error) {
		return srv.Health(ctx, request.(*HealthRequest))
	}
	for _, mw := range mws {
		set.HealthEndpoint = mw(set.HealthEndpoint)
	}
	return set
}

// V0KitHTTPTransport defined from kit/transport/http.
type V0KitHTTPTransport interface {
	DecodeHealthRequest(context.Context, *http.Request) (interface{}, error)
	EncodeHealthResponse(context.Context, http.ResponseWriter, interface{}) error
	EncodeHealthRequest(context.Context, *http.Request, interface{}) error
	DecodeHealthResponse(context.Context, *http.Response) (interface{}, error)
}

// V0KitGRPCTransport defined from kit/transport/grpc.
type V0KitGRPCTransport interface {
	DecodeHealthRequest(context.Context, interface{}) (interface{}, error)
	EncodeHealthResponse(context.Context, interface{}) (interface{}, error)
	EncodeHealthRequest(context.Context, interface{}) (interface{}, error)
	DecodeHealthResponse(context.Context, interface{}) (interface{}, error)
}

// V0KitHTTPHandlerSet is realize kit/transport/http.Server set.
type V0KitHTTPHandlerSet struct {
	HealthHandler *http1.Server
}

func NewV0KitHTTPHandlerSet(
	set V0KitEndpointSet,
	transport V0KitHTTPTransport,
	opts ...http1.ServerOption,
) V0KitHTTPHandlerSet {
	s := V0KitHTTPHandlerSet{}
	s.HealthHandler = http1.NewServer(
		set.HealthEndpoint,
		transport.DecodeHealthRequest,
		transport.EncodeHealthResponse,
		opts...,
	)
	return s
}

// V0KitGRPCHandlerSet is realize kit/transport/grpc.Server set.
type V0KitGRPCHandlerSet struct {
	HealthHandler *grpc.Server
}

func NewV0KitGRPCHandlerSet(
	set V0KitEndpointSet,
	transport V0KitGRPCTransport,
	opts ...grpc.ServerOption,
) V0KitGRPCHandlerSet {
	s := V0KitGRPCHandlerSet{}
	s.HealthHandler = grpc.NewServer(
		set.HealthEndpoint,
		transport.DecodeHealthRequest,
		transport.EncodeHealthResponse,
		opts...,
	)
	return s
}
